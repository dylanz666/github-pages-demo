{"version":3,"file":"js/988.1b28e6ca.js","mappings":"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","sources":["webpack://debug-bridge-client-tasty/./src/api/devices.ts","webpack://debug-bridge-client-tasty/./src/components/DeviceViewer.vue?f8ec","webpack://debug-bridge-client-tasty/./src/components/DeviceViewer.vue","webpack://debug-bridge-client-tasty/./src/components/DeviceViewer.vue?aae5"],"sourcesContent":["import request from '@/utils/request'\r\n\r\nexport function getAdbDevices(server: string) {\r\n    return request({\r\n        url: `http://${server}/bridge/adb_devices`,\r\n        method: 'get',\r\n        params: {}\r\n    });\r\n}\r\n\r\nexport function getDeviceIp(server: string, device_id: string) {\r\n    return request({\r\n        url: `http://${server}/bridge/device_ip?device_id=${device_id}`,\r\n        method: 'get',\r\n        params: {}\r\n    });\r\n}\r\n\r\nexport function wakeUpDeviceByApi(server: string, device_id: string) {\r\n    return request({\r\n        url: `http://${server}/bridge/device/wake_up?device_id=${device_id}`,\r\n        method: 'post',\r\n        params: {}\r\n    });\r\n}\r\n\r\nexport function rebootDeviceByApi(server: string, device_id: string) {\r\n    return request({\r\n        url: `http://${server}/bridge/device/reboot?device_id=${device_id}`,\r\n        method: 'post',\r\n        params: {}\r\n    });\r\n}","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, isRef as _isRef, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle } from \"vue\"\n\nconst _hoisted_1 = { style: {\"background-color\":\"yellow\"} }\nconst _hoisted_2 = {\n  class: \"checkbox-container\",\n  style: {\"margin-left\":\"10px\"}\n}\nconst _hoisted_3 = { class: \"resize-button\" }\nconst _hoisted_4 = { key: 0 }\nconst _hoisted_5 = [\"id\"]\n\nimport { ElMessage } from 'element-plus';\r\nimport { onBeforeUnmount, onBeforeMount, onMounted, ref, computed } from 'vue';\r\nimport { useRoute } from 'vue-router';\r\nimport { getAdbDevices, getDeviceIp, wakeUpDeviceByApi, rebootDeviceByApi } from \"@/api/devices\";\r\n\r\n// 定义设备接口\r\ninterface Device {\r\n    udid: string;\r\n    device_ip: string;\r\n    screenshot_url: string;\r\n    fill_ratio: number;\r\n    show: boolean;\r\n    refreshLoading: boolean;\r\n    wakeUpLoading: boolean;\r\n    rebootLoading: boolean;\r\n}\r\n\r\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'DeviceViewer',\n  setup(__props) {\n\r\nlet intervalId: number | undefined;\r\nconst globalFillRatio = ref(50);\r\nlet devices = ref<Device[]>([]);\r\nlet webUILinkLoading = ref(false);\r\nlet reloadButtonLoading = ref(false);\r\n\r\nconst route = useRoute();\r\nlet server = computed(() => route.query.server).value?.toString();\r\nserver = server ? server : \"\";\r\nconst serverAddress = server.split(\":\")[0];\r\nconst serverName = computed(() => route.query.name).value;\r\nlet checkedDevices = ref<string[]>([]);\r\n\r\nfunction containsUpperCase(text: string): boolean {\r\n    const upperCaseRegex = /[A-Z]/;\r\n    return upperCaseRegex.test(text);\r\n}\r\n\r\nonBeforeUnmount(() => {\r\n    if (intervalId) {\r\n        clearInterval(intervalId);\r\n    }\r\n});\r\n\r\nonBeforeMount(async () => {\r\n    await reloadDevices();\r\n})\r\n\r\nonMounted(() => {\r\n    intervalId = setInterval(updateScreenshotUrls, 2500);\r\n});\r\n\r\nconst reloadDevices = async () => {\r\n    if (undefined != intervalId) {\r\n        clearInterval(intervalId);\r\n        intervalId = undefined;\r\n    }\r\n    if (undefined == server || null == server || \"\" == server || !server) {\r\n        return\r\n    }\r\n    reloadButtonLoading.value = true;\r\n    const response = await getAdbDevices(server);\r\n    const result = response.data ? response.data : [];\r\n    devices.value = result.map((item: any) => ({\r\n        udid: item,\r\n        device_ip: \"\",\r\n        screenshot_url: \"\",\r\n        fill_ratio: 50,\r\n        show: !item.includes(\":\") && !containsUpperCase(item),\r\n        refreshLoading: false,\r\n        wakeUpLoading: false,\r\n        rebootLoading: false,\r\n    }));\r\n    const device_ids = devices.value\r\n        .filter(item => item.show)\r\n        .map(item => item.udid)\r\n    changeCheckedDevices(device_ids);\r\n\r\n    updateScreenshotUrls();\r\n    reloadButtonLoading.value = false;\r\n}\r\n\r\nconst updateScreenshotUrls = () => {\r\n    devices.value.forEach(item => {\r\n        const element: any = document.getElementById(`screenshot-${item.udid}`);\r\n        if (element) {\r\n            element.src = `http://${server}/bridge/adb_screenshot?device_id=${item.udid}&timestamp=${new Date().getTime()}`;\r\n        }\r\n    });\r\n};\r\n\r\n// devices\r\nconst checkAll = ref(false);\r\nconst isIndeterminate = ref(true);\r\nconst changeCheckAll = (selectAll: boolean) => {\r\n    devices.value.forEach(item => {\r\n        item.show = selectAll\r\n    });\r\n    checkedDevices.value = selectAll ? devices.value\r\n        .map(item => item.udid) : [];\r\n    isIndeterminate.value = false;\r\n}\r\nconst changeCheckedDevices = (device_ids: string[]) => {\r\n    const checkedCount = device_ids.length;\r\n    checkAll.value = checkedCount === devices.value.length;\r\n    isIndeterminate.value = checkedCount > 0 && checkedCount < devices.value.length;\r\n    checkedDevices.value = device_ids\r\n    devices.value.forEach(item => {\r\n        item.show = device_ids.includes(item.udid);\r\n    });\r\n}\r\n\r\nconst copyUdid = (udid: string) => {\r\n    navigator.clipboard.writeText(udid)\r\n        .then(() => {\r\n            ElMessage({\r\n                message: 'Congrats, Device UDID is copied to clipboard.',\r\n                type: 'success',\r\n            });\r\n        })\r\n        .catch(() => {\r\n            ElMessage.error('Oops, failed to copy device UDID to clipboard.');\r\n        });\r\n}\r\n\r\nconst openWebUi = async (device_id: string) => {\r\n    webUILinkLoading.value = true;\r\n    const response = await getDeviceIp(server, device_id);\r\n    const device_ip = response.data.device_ip;\r\n    webUILinkLoading.value = false;\r\n    navigator.clipboard.writeText(device_ip)\r\n        .then(() => {\r\n            ElMessage({\r\n                message: 'Congrats, Device IP is copied to clipboard.',\r\n                type: 'success',\r\n            });\r\n        })\r\n        .catch(() => {\r\n            ElMessage.error('Oops, failed to copy device IP to clipboardd.');\r\n        });\r\n    window.open(`http://${device_ip}`, '_blank');\r\n}\r\n\r\nconst resize = () => {\r\n    devices.value.forEach((item) => {\r\n        item.fill_ratio = 50;\r\n    });\r\n    globalFillRatio.value = 50;\r\n}\r\n\r\nconst hideView = (device_id: string) => {\r\n    const device = devices.value.find(item => item.udid === device_id);\r\n    if (device) {\r\n        device.show = false;\r\n        checkedDevices.value = checkedDevices.value.filter(id => id !== device_id);\r\n    }\r\n}\r\n\r\nconst refreshDevice = async (device_id: string) => {\r\n    const device = devices.value.find(item => item.udid === device_id);\r\n    if (!device) {\r\n        return;\r\n    }\r\n    device.refreshLoading = true;\r\n    const element: any = document.getElementById(`screenshot-${device_id}`);\r\n    if (element) {\r\n        element.src = \"\";\r\n        element.src = `http://${server}/bridge/adb_screenshot?device_id=${device_id}&timestamp=${new Date().getTime()}`;\r\n\r\n        setTimeout(() => {\r\n            device.refreshLoading = false;\r\n        }, 2000);\r\n    }\r\n}\r\n\r\nconst wakeUpDevice = async (device_id: string) => {\r\n    const device = devices.value.find(item => item.udid === device_id);\r\n    if (!device) {\r\n        return;\r\n    }\r\n    device.wakeUpLoading = true;\r\n    const response = await wakeUpDeviceByApi(server, device_id);\r\n    device.wakeUpLoading = false;\r\n    ElMessage({\r\n        message: response.data.message,\r\n        showClose: true,\r\n        center: true,\r\n        type: response.data.status == \"success\" ? \"success\" : \"error\",\r\n        duration: 5 * 1000\r\n    });\r\n}\r\n\r\nconst rebootDevice = async (device_id: string) => {\r\n    const device = devices.value.find(item => item.udid === device_id);\r\n    if (!device) {\r\n        return;\r\n    }\r\n    device.rebootLoading = true;\r\n    const response = await rebootDeviceByApi(server, device_id);\r\n    device.rebootLoading = false;\r\n    ElMessage({\r\n        message: response.data.message,\r\n        showClose: true,\r\n        center: true,\r\n        type: response.data.status == \"success\" ? \"success\" : \"error\",\r\n        duration: 5 * 1000\r\n    });\r\n}\r\n\r\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_el_checkbox = _resolveComponent(\"el-checkbox\")!\n  const _component_el_checkbox_group = _resolveComponent(\"el-checkbox-group\")!\n  const _component_el_button = _resolveComponent(\"el-button\")!\n  const _component_el_aside = _resolveComponent(\"el-aside\")!\n  const _component_el_empty = _resolveComponent(\"el-empty\")!\n  const _component_el_col = _resolveComponent(\"el-col\")!\n  const _component_el_slider = _resolveComponent(\"el-slider\")!\n  const _component_el_row = _resolveComponent(\"el-row\")!\n  const _component_CopyDocument = _resolveComponent(\"CopyDocument\")!\n  const _component_el_icon = _resolveComponent(\"el-icon\")!\n  const _component_el_tooltip = _resolveComponent(\"el-tooltip\")!\n  const _component_ChromeFilled = _resolveComponent(\"ChromeFilled\")!\n  const _component_Refresh = _resolveComponent(\"Refresh\")!\n  const _component_RefreshRight = _resolveComponent(\"RefreshRight\")!\n  const _component_Sunrise = _resolveComponent(\"Sunrise\")!\n  const _component_el_button_group = _resolveComponent(\"el-button-group\")!\n  const _component_DeleteFilled = _resolveComponent(\"DeleteFilled\")!\n  const _component_el_space = _resolveComponent(\"el-space\")!\n  const _component_el_card = _resolveComponent(\"el-card\")!\n  const _component_el_main = _resolveComponent(\"el-main\")!\n  const _component_el_container = _resolveComponent(\"el-container\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", null, [\n    _createVNode(_component_el_container, { style: {\"display\":\"flex\"} }, {\n      default: _withCtx(() => [\n        _createVNode(_component_el_aside, { style: {\"background-color\":\"#001f3f\",\"width\":\"200px\",\"margin\":\"0\",\"padding\":\"0\"} }, {\n          default: _withCtx(() => [\n            _createElementVNode(\"div\", null, [\n              _createElementVNode(\"span\", _hoisted_1, _toDisplayString(_unref(serverName)) + \": \" + _toDisplayString(_unref(serverAddress)), 1),\n              _createElementVNode(\"div\", _hoisted_2, [\n                _createVNode(_component_el_checkbox, {\n                  class: \"checkbox-left\",\n                  modelValue: checkAll.value,\n                  \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((checkAll).value = $event)),\n                  indeterminate: isIndeterminate.value,\n                  onChange: changeCheckAll\n                }, {\n                  default: _withCtx(() => _cache[3] || (_cache[3] = [\n                    _createTextVNode(\"View all devices\")\n                  ])),\n                  _: 1\n                }, 8, [\"modelValue\", \"indeterminate\"]),\n                _createVNode(_component_el_checkbox_group, {\n                  class: \"checkbox-group-left\",\n                  modelValue: _unref(checkedDevices),\n                  \"onUpdate:modelValue\": _cache[1] || (_cache[1] = ($event: any) => (_isRef(checkedDevices) ? (checkedDevices).value = $event : checkedDevices = $event)),\n                  onChange: changeCheckedDevices\n                }, {\n                  default: _withCtx(() => [\n                    (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(devices), (device) => {\n                      return (_openBlock(), _createBlock(_component_el_checkbox, {\n                        class: \"checkbox-left\",\n                        key: device.udid,\n                        label: device.udid\n                      }, {\n                        default: _withCtx(() => [\n                          _createTextVNode(_toDisplayString(device.udid), 1)\n                        ]),\n                        _: 2\n                      }, 1032, [\"label\"]))\n                    }), 128))\n                  ]),\n                  _: 1\n                }, 8, [\"modelValue\"])\n              ]),\n              _createElementVNode(\"div\", _hoisted_3, [\n                _createVNode(_component_el_button, {\n                  type: \"primary\",\n                  onClick: reloadDevices,\n                  loading: _unref(reloadButtonLoading)\n                }, {\n                  default: _withCtx(() => [\n                    (!_unref(reloadButtonLoading))\n                      ? (_openBlock(), _createElementBlock(\"span\", _hoisted_4, \"Reload\"))\n                      : _createCommentVNode(\"\", true)\n                  ]),\n                  _: 1\n                }, 8, [\"loading\"]),\n                _createVNode(_component_el_button, {\n                  type: \"success\",\n                  onClick: resize\n                }, {\n                  default: _withCtx(() => _cache[4] || (_cache[4] = [\n                    _createTextVNode(\"Resize\")\n                  ])),\n                  _: 1\n                })\n              ])\n            ])\n          ]),\n          _: 1\n        }),\n        _createVNode(_component_el_main, null, {\n          default: _withCtx(() => [\n            (_unref(checkedDevices).length == 0)\n              ? (_openBlock(), _createBlock(_component_el_empty, {\n                  key: 0,\n                  description: \"Please wait...\"\n                }))\n              : _createCommentVNode(\"\", true),\n            _createVNode(_component_el_row, { gutter: \"1\" }, {\n              default: _withCtx(() => [\n                _createVNode(_component_el_col, { span: 23 }, {\n                  default: _withCtx(() => [\n                    _createVNode(_component_el_space, { wrap: \"\" }, {\n                      default: _withCtx(() => [\n                        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(devices), (info) => {\n                          return (_openBlock(), _createElementBlock(\"div\", {\n                            key: info.udid\n                          }, [\n                            (info.show)\n                              ? (_openBlock(), _createBlock(_component_el_card, {\n                                  key: 0,\n                                  class: \"box-card\",\n                                  style: _normalizeStyle({ width: 550 + 10 * (info.fill_ratio - 50) + 10 * (globalFillRatio.value - 50) + 'px' })\n                                }, {\n                                  default: _withCtx(() => [\n                                    _createVNode(_component_el_row, { gutter: \"1\" }, {\n                                      default: _withCtx(() => [\n                                        _createVNode(_component_el_col, { span: 23 }, {\n                                          default: _withCtx(() => [\n                                            _createElementVNode(\"img\", {\n                                              style: {\"width\":\"98%\",\"height\":\"auto\"},\n                                              id: 'screenshot-' + info.udid,\n                                              draggable: \"false\",\n                                              src: \"\"\n                                            }, null, 8, _hoisted_5)\n                                          ]),\n                                          _: 2\n                                        }, 1024),\n                                        _createVNode(_component_el_col, { span: 1 }, {\n                                          default: _withCtx(() => [\n                                            _createVNode(_component_el_slider, {\n                                              modelValue: info.fill_ratio,\n                                              \"onUpdate:modelValue\": ($event: any) => ((info.fill_ratio) = $event),\n                                              vertical: \"\",\n                                              min: 20,\n                                              max: 100,\n                                              step: 1\n                                            }, null, 8, [\"modelValue\", \"onUpdate:modelValue\"])\n                                          ]),\n                                          _: 2\n                                        }, 1024)\n                                      ]),\n                                      _: 2\n                                    }, 1024),\n                                    _createVNode(_component_el_space, null, {\n                                      default: _withCtx(() => [\n                                        _createElementVNode(\"span\", null, _toDisplayString(info.udid), 1),\n                                        _createVNode(_component_el_button_group, { class: \"ml-4\" }, {\n                                          default: _withCtx(() => [\n                                            _createVNode(_component_el_tooltip, {\n                                              class: \"box-item\",\n                                              effect: \"dark\",\n                                              content: \"Copy udid\",\n                                              placement: \"bottom\"\n                                            }, {\n                                              default: _withCtx(() => [\n                                                _createVNode(_component_el_button, {\n                                                  onClick: ($event: any) => (copyUdid(info.udid)),\n                                                  type: \"primary\"\n                                                }, {\n                                                  default: _withCtx(() => [\n                                                    _createVNode(_component_el_icon, null, {\n                                                      default: _withCtx(() => [\n                                                        _createVNode(_component_CopyDocument)\n                                                      ]),\n                                                      _: 1\n                                                    })\n                                                  ]),\n                                                  _: 2\n                                                }, 1032, [\"onClick\"])\n                                              ]),\n                                              _: 2\n                                            }, 1024),\n                                            _createVNode(_component_el_tooltip, {\n                                              class: \"box-item\",\n                                              effect: \"dark\",\n                                              content: \"WebUI\",\n                                              placement: \"bottom\"\n                                            }, {\n                                              default: _withCtx(() => [\n                                                _createVNode(_component_el_button, {\n                                                  onClick: ($event: any) => (openWebUi(info.udid)),\n                                                  loading: _unref(webUILinkLoading),\n                                                  class: \"fixed-small-button\",\n                                                  type: \"primary\"\n                                                }, {\n                                                  default: _withCtx(() => [\n                                                    (!_unref(webUILinkLoading))\n                                                      ? (_openBlock(), _createBlock(_component_el_icon, { key: 0 }, {\n                                                          default: _withCtx(() => [\n                                                            _createVNode(_component_ChromeFilled)\n                                                          ]),\n                                                          _: 1\n                                                        }))\n                                                      : _createCommentVNode(\"\", true)\n                                                  ]),\n                                                  _: 2\n                                                }, 1032, [\"onClick\", \"loading\"])\n                                              ]),\n                                              _: 2\n                                            }, 1024),\n                                            _createVNode(_component_el_tooltip, {\n                                              class: \"box-item\",\n                                              effect: \"dark\",\n                                              content: \"Refresh\",\n                                              placement: \"bottom\"\n                                            }, {\n                                              default: _withCtx(() => [\n                                                _createVNode(_component_el_button, {\n                                                  type: \"primary\",\n                                                  onClick: ($event: any) => (refreshDevice(info.udid)),\n                                                  loading: info.refreshLoading,\n                                                  class: \"fixed-small-button\"\n                                                }, {\n                                                  default: _withCtx(() => [\n                                                    (!info.refreshLoading)\n                                                      ? (_openBlock(), _createBlock(_component_el_icon, { key: 0 }, {\n                                                          default: _withCtx(() => [\n                                                            _createVNode(_component_Refresh)\n                                                          ]),\n                                                          _: 1\n                                                        }))\n                                                      : _createCommentVNode(\"\", true)\n                                                  ]),\n                                                  _: 2\n                                                }, 1032, [\"onClick\", \"loading\"])\n                                              ]),\n                                              _: 2\n                                            }, 1024),\n                                            _createVNode(_component_el_tooltip, {\n                                              class: \"box-item\",\n                                              effect: \"dark\",\n                                              content: \"Wake Up\",\n                                              placement: \"bottom\"\n                                            }, {\n                                              default: _withCtx(() => [\n                                                _createVNode(_component_el_button, {\n                                                  type: \"primary\",\n                                                  onClick: ($event: any) => (wakeUpDevice(info.udid)),\n                                                  loading: info.wakeUpLoading,\n                                                  class: \"fixed-small-button\"\n                                                }, {\n                                                  default: _withCtx(() => [\n                                                    (!info.wakeUpLoading)\n                                                      ? (_openBlock(), _createBlock(_component_el_icon, { key: 0 }, {\n                                                          default: _withCtx(() => [\n                                                            _createVNode(_component_RefreshRight)\n                                                          ]),\n                                                          _: 1\n                                                        }))\n                                                      : _createCommentVNode(\"\", true)\n                                                  ]),\n                                                  _: 2\n                                                }, 1032, [\"onClick\", \"loading\"])\n                                              ]),\n                                              _: 2\n                                            }, 1024),\n                                            _createVNode(_component_el_tooltip, {\n                                              class: \"box-item\",\n                                              effect: \"dark\",\n                                              content: \"Reboot\",\n                                              placement: \"bottom\"\n                                            }, {\n                                              default: _withCtx(() => [\n                                                _createVNode(_component_el_button, {\n                                                  type: \"primary\",\n                                                  onClick: ($event: any) => (rebootDevice(info.udid)),\n                                                  loading: info.rebootLoading,\n                                                  class: \"fixed-small-button\"\n                                                }, {\n                                                  default: _withCtx(() => [\n                                                    (!info.rebootLoading)\n                                                      ? (_openBlock(), _createBlock(_component_el_icon, { key: 0 }, {\n                                                          default: _withCtx(() => [\n                                                            _createVNode(_component_Sunrise)\n                                                          ]),\n                                                          _: 1\n                                                        }))\n                                                      : _createCommentVNode(\"\", true)\n                                                  ]),\n                                                  _: 2\n                                                }, 1032, [\"onClick\", \"loading\"])\n                                              ]),\n                                              _: 2\n                                            }, 1024)\n                                          ]),\n                                          _: 2\n                                        }, 1024),\n                                        _createVNode(_component_el_tooltip, {\n                                          class: \"box-item\",\n                                          effect: \"dark\",\n                                          content: \"Hide View\",\n                                          placement: \"bottom\"\n                                        }, {\n                                          default: _withCtx(() => [\n                                            _createVNode(_component_el_button, {\n                                              type: \"danger\",\n                                              onClick: ($event: any) => (hideView(info.udid))\n                                            }, {\n                                              default: _withCtx(() => [\n                                                _createVNode(_component_el_icon, null, {\n                                                  default: _withCtx(() => [\n                                                    _createVNode(_component_DeleteFilled)\n                                                  ]),\n                                                  _: 1\n                                                })\n                                              ]),\n                                              _: 2\n                                            }, 1032, [\"onClick\"])\n                                          ]),\n                                          _: 2\n                                        }, 1024)\n                                      ]),\n                                      _: 2\n                                    }, 1024)\n                                  ]),\n                                  _: 2\n                                }, 1032, [\"style\"]))\n                              : _createCommentVNode(\"\", true)\n                          ]))\n                        }), 128))\n                      ]),\n                      _: 1\n                    })\n                  ]),\n                  _: 1\n                }),\n                _createVNode(_component_el_col, { span: 1 }, {\n                  default: _withCtx(() => [\n                    (_unref(checkedDevices).length != 0)\n                      ? (_openBlock(), _createBlock(_component_el_slider, {\n                          key: 0,\n                          modelValue: globalFillRatio.value,\n                          \"onUpdate:modelValue\": _cache[2] || (_cache[2] = ($event: any) => ((globalFillRatio).value = $event)),\n                          vertical: \"\",\n                          min: 20,\n                          max: 100,\n                          step: 1\n                        }, null, 8, [\"modelValue\"]))\n                      : _createCommentVNode(\"\", true)\n                  ]),\n                  _: 1\n                })\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    })\n  ]))\n}\n}\n\n})","<template>\r\n    <div>\r\n        <el-container style=\"display: flex;\">\r\n            <el-aside style=\"background-color: #001f3f;width: 200px;margin: 0;padding: 0;\">\r\n                <div>\r\n                    <span style=\"background-color: yellow;\">{{ serverName }}: {{ serverAddress }}</span>\r\n                    <div class=\"checkbox-container\" style=\"margin-left: 10px;\">\r\n                        <el-checkbox class=\"checkbox-left\" v-model=\"checkAll\" :indeterminate=\"isIndeterminate\"\r\n                            @change=\"changeCheckAll\">View all devices</el-checkbox>\r\n                        <el-checkbox-group class=\"checkbox-group-left\" v-model=\"checkedDevices\"\r\n                            @change=\"changeCheckedDevices\">\r\n                            <el-checkbox class=\"checkbox-left\" v-for=\"device in devices\" :key=\"device.udid\"\r\n                                :label=\"device.udid\">{{\r\n                                    device.udid\r\n                                }}</el-checkbox>\r\n                        </el-checkbox-group>\r\n                    </div>\r\n\r\n                    <div class=\"resize-button\">\r\n                        <el-button type=\"primary\" @click=\"reloadDevices\" :loading=\"reloadButtonLoading\"><span\r\n                                v-if=\"!reloadButtonLoading\">Reload</span></el-button>\r\n                        <el-button type=\"success\" @click=\"resize\">Resize</el-button>\r\n                    </div>\r\n                </div>\r\n            </el-aside>\r\n            <el-main>\r\n                <el-empty description=\"Please wait...\" v-if=\"checkedDevices.length == 0\" />\r\n                <el-row gutter=\"1\">\r\n                    <el-col :span=\"23\">\r\n                        <el-space wrap>\r\n                            <div v-for=\"info in devices\" :key=\"info.udid\">\r\n                                <el-card v-if=\"info.show\" class=\"box-card\"\r\n                                    :style=\"{ width: 550 + 10 * (info.fill_ratio - 50) + 10 * (globalFillRatio - 50) + 'px' }\">\r\n                                    <el-row gutter=\"1\">\r\n                                        <el-col :span=\"23\">\r\n                                            <!-- <image style=\"width: 98%; height: auto;\" :src=\"info.screenshot_url\" /> -->\r\n                                            <img style=\"width: 98%; height: auto;\" :id=\"'screenshot-' + info.udid\"\r\n                                                draggable=\"false\" src=\"\" />\r\n                                        </el-col>\r\n                                        <el-col :span=\"1\">\r\n                                            <el-slider v-model=\"info.fill_ratio\" vertical :min=\"20\" :max=\"100\"\r\n                                                :step=\"1\" />\r\n                                        </el-col>\r\n                                    </el-row>\r\n                                    <el-space>\r\n                                        <span>{{ info.udid }}</span>\r\n                                        <el-button-group class=\"ml-4\">\r\n                                            <el-tooltip class=\"box-item\" effect=\"dark\" content=\"Copy udid\"\r\n                                                placement=\"bottom\">\r\n                                                <el-button @click=\"copyUdid(info.udid)\" type=\"primary\">\r\n                                                    <el-icon>\r\n                                                        <CopyDocument />\r\n                                                    </el-icon>\r\n                                                </el-button>\r\n                                            </el-tooltip>\r\n                                            <el-tooltip class=\"box-item\" effect=\"dark\" content=\"WebUI\"\r\n                                                placement=\"bottom\">\r\n                                                <el-button @click=\"openWebUi(info.udid)\" :loading=\"webUILinkLoading\"\r\n                                                    class=\"fixed-small-button\" type=\"primary\">\r\n                                                    <el-icon v-if=\"!webUILinkLoading\">\r\n                                                        <ChromeFilled />\r\n                                                    </el-icon>\r\n                                                </el-button>\r\n                                            </el-tooltip>\r\n                                            <el-tooltip class=\"box-item\" effect=\"dark\" content=\"Refresh\"\r\n                                                placement=\"bottom\">\r\n                                                <el-button type=\"primary\" @click=\"refreshDevice(info.udid)\"\r\n                                                    :loading=\"info.refreshLoading\" class=\"fixed-small-button\">\r\n                                                    <el-icon v-if=\"!info.refreshLoading\">\r\n                                                        <Refresh />\r\n                                                    </el-icon>\r\n                                                </el-button>\r\n                                            </el-tooltip>\r\n                                            <el-tooltip class=\"box-item\" effect=\"dark\" content=\"Wake Up\"\r\n                                                placement=\"bottom\">\r\n                                                <el-button type=\"primary\" @click=\"wakeUpDevice(info.udid)\"\r\n                                                    :loading=\"info.wakeUpLoading\" class=\"fixed-small-button\">\r\n                                                    <el-icon v-if=\"!info.wakeUpLoading\">\r\n                                                        <RefreshRight />\r\n                                                    </el-icon>\r\n                                                </el-button>\r\n                                            </el-tooltip>\r\n                                            <el-tooltip class=\"box-item\" effect=\"dark\" content=\"Reboot\"\r\n                                                placement=\"bottom\">\r\n                                                <el-button type=\"primary\" @click=\"rebootDevice(info.udid)\"\r\n                                                    :loading=\"info.rebootLoading\" class=\"fixed-small-button\">\r\n                                                    <el-icon v-if=\"!info.rebootLoading\">\r\n                                                        <Sunrise />\r\n                                                    </el-icon>\r\n                                                </el-button>\r\n                                            </el-tooltip>\r\n                                        </el-button-group>\r\n                                        <el-tooltip class=\"box-item\" effect=\"dark\" content=\"Hide View\"\r\n                                            placement=\"bottom\">\r\n                                            <el-button type=\"danger\" @click=\"hideView(info.udid)\">\r\n                                                <el-icon>\r\n                                                    <DeleteFilled />\r\n                                                </el-icon>\r\n                                            </el-button>\r\n                                        </el-tooltip>\r\n                                    </el-space>\r\n                                </el-card>\r\n                            </div>\r\n                        </el-space>\r\n                    </el-col>\r\n                    <el-col :span=\"1\">\r\n                        <el-slider v-model=\"globalFillRatio\" vertical :min=\"20\" :max=\"100\" :step=\"1\"\r\n                            v-if=\"checkedDevices.length != 0\" />\r\n                    </el-col>\r\n                </el-row>\r\n            </el-main>\r\n        </el-container>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\" setup>\r\nimport { ElMessage } from 'element-plus';\r\nimport { onBeforeUnmount, onBeforeMount, onMounted, ref, computed } from 'vue';\r\nimport { useRoute } from 'vue-router';\r\nimport { getAdbDevices, getDeviceIp, wakeUpDeviceByApi, rebootDeviceByApi } from \"@/api/devices\";\r\n\r\n// 定义设备接口\r\ninterface Device {\r\n    udid: string;\r\n    device_ip: string;\r\n    screenshot_url: string;\r\n    fill_ratio: number;\r\n    show: boolean;\r\n    refreshLoading: boolean;\r\n    wakeUpLoading: boolean;\r\n    rebootLoading: boolean;\r\n}\r\n\r\nlet intervalId: number | undefined;\r\nconst globalFillRatio = ref(50);\r\nlet devices = ref<Device[]>([]);\r\nlet webUILinkLoading = ref(false);\r\nlet reloadButtonLoading = ref(false);\r\n\r\nconst route = useRoute();\r\nlet server = computed(() => route.query.server).value?.toString();\r\nserver = server ? server : \"\";\r\nconst serverAddress = server.split(\":\")[0];\r\nconst serverName = computed(() => route.query.name).value;\r\nlet checkedDevices = ref<string[]>([]);\r\n\r\nfunction containsUpperCase(text: string): boolean {\r\n    const upperCaseRegex = /[A-Z]/;\r\n    return upperCaseRegex.test(text);\r\n}\r\n\r\nonBeforeUnmount(() => {\r\n    if (intervalId) {\r\n        clearInterval(intervalId);\r\n    }\r\n});\r\n\r\nonBeforeMount(async () => {\r\n    await reloadDevices();\r\n})\r\n\r\nonMounted(() => {\r\n    intervalId = setInterval(updateScreenshotUrls, 2500);\r\n});\r\n\r\nconst reloadDevices = async () => {\r\n    if (undefined != intervalId) {\r\n        clearInterval(intervalId);\r\n        intervalId = undefined;\r\n    }\r\n    if (undefined == server || null == server || \"\" == server || !server) {\r\n        return\r\n    }\r\n    reloadButtonLoading.value = true;\r\n    const response = await getAdbDevices(server);\r\n    const result = response.data ? response.data : [];\r\n    devices.value = result.map((item: any) => ({\r\n        udid: item,\r\n        device_ip: \"\",\r\n        screenshot_url: \"\",\r\n        fill_ratio: 50,\r\n        show: !item.includes(\":\") && !containsUpperCase(item),\r\n        refreshLoading: false,\r\n        wakeUpLoading: false,\r\n        rebootLoading: false,\r\n    }));\r\n    const device_ids = devices.value\r\n        .filter(item => item.show)\r\n        .map(item => item.udid)\r\n    changeCheckedDevices(device_ids);\r\n\r\n    updateScreenshotUrls();\r\n    reloadButtonLoading.value = false;\r\n}\r\n\r\nconst updateScreenshotUrls = () => {\r\n    devices.value.forEach(item => {\r\n        const element: any = document.getElementById(`screenshot-${item.udid}`);\r\n        if (element) {\r\n            element.src = `http://${server}/bridge/adb_screenshot?device_id=${item.udid}&timestamp=${new Date().getTime()}`;\r\n        }\r\n    });\r\n};\r\n\r\n// devices\r\nconst checkAll = ref(false);\r\nconst isIndeterminate = ref(true);\r\nconst changeCheckAll = (selectAll: boolean) => {\r\n    devices.value.forEach(item => {\r\n        item.show = selectAll\r\n    });\r\n    checkedDevices.value = selectAll ? devices.value\r\n        .map(item => item.udid) : [];\r\n    isIndeterminate.value = false;\r\n}\r\nconst changeCheckedDevices = (device_ids: string[]) => {\r\n    const checkedCount = device_ids.length;\r\n    checkAll.value = checkedCount === devices.value.length;\r\n    isIndeterminate.value = checkedCount > 0 && checkedCount < devices.value.length;\r\n    checkedDevices.value = device_ids\r\n    devices.value.forEach(item => {\r\n        item.show = device_ids.includes(item.udid);\r\n    });\r\n}\r\n\r\nconst copyUdid = (udid: string) => {\r\n    navigator.clipboard.writeText(udid)\r\n        .then(() => {\r\n            ElMessage({\r\n                message: 'Congrats, Device UDID is copied to clipboard.',\r\n                type: 'success',\r\n            });\r\n        })\r\n        .catch(() => {\r\n            ElMessage.error('Oops, failed to copy device UDID to clipboard.');\r\n        });\r\n}\r\n\r\nconst openWebUi = async (device_id: string) => {\r\n    webUILinkLoading.value = true;\r\n    const response = await getDeviceIp(server, device_id);\r\n    const device_ip = response.data.device_ip;\r\n    webUILinkLoading.value = false;\r\n    navigator.clipboard.writeText(device_ip)\r\n        .then(() => {\r\n            ElMessage({\r\n                message: 'Congrats, Device IP is copied to clipboard.',\r\n                type: 'success',\r\n            });\r\n        })\r\n        .catch(() => {\r\n            ElMessage.error('Oops, failed to copy device IP to clipboardd.');\r\n        });\r\n    window.open(`http://${device_ip}`, '_blank');\r\n}\r\n\r\nconst resize = () => {\r\n    devices.value.forEach((item) => {\r\n        item.fill_ratio = 50;\r\n    });\r\n    globalFillRatio.value = 50;\r\n}\r\n\r\nconst hideView = (device_id: string) => {\r\n    const device = devices.value.find(item => item.udid === device_id);\r\n    if (device) {\r\n        device.show = false;\r\n        checkedDevices.value = checkedDevices.value.filter(id => id !== device_id);\r\n    }\r\n}\r\n\r\nconst refreshDevice = async (device_id: string) => {\r\n    const device = devices.value.find(item => item.udid === device_id);\r\n    if (!device) {\r\n        return;\r\n    }\r\n    device.refreshLoading = true;\r\n    const element: any = document.getElementById(`screenshot-${device_id}`);\r\n    if (element) {\r\n        element.src = \"\";\r\n        element.src = `http://${server}/bridge/adb_screenshot?device_id=${device_id}&timestamp=${new Date().getTime()}`;\r\n\r\n        setTimeout(() => {\r\n            device.refreshLoading = false;\r\n        }, 2000);\r\n    }\r\n}\r\n\r\nconst wakeUpDevice = async (device_id: string) => {\r\n    const device = devices.value.find(item => item.udid === device_id);\r\n    if (!device) {\r\n        return;\r\n    }\r\n    device.wakeUpLoading = true;\r\n    const response = await wakeUpDeviceByApi(server, device_id);\r\n    device.wakeUpLoading = false;\r\n    ElMessage({\r\n        message: response.data.message,\r\n        showClose: true,\r\n        center: true,\r\n        type: response.data.status == \"success\" ? \"success\" : \"error\",\r\n        duration: 5 * 1000\r\n    });\r\n}\r\n\r\nconst rebootDevice = async (device_id: string) => {\r\n    const device = devices.value.find(item => item.udid === device_id);\r\n    if (!device) {\r\n        return;\r\n    }\r\n    device.rebootLoading = true;\r\n    const response = await rebootDeviceByApi(server, device_id);\r\n    device.rebootLoading = false;\r\n    ElMessage({\r\n        message: response.data.message,\r\n        showClose: true,\r\n        center: true,\r\n        type: response.data.status == \"success\" ? \"success\" : \"error\",\r\n        duration: 5 * 1000\r\n    });\r\n}\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.el-main {\r\n    padding: 5px;\r\n    /* 调整内边距 */\r\n}\r\n\r\n.checkbox-left {\r\n    text-align: left;\r\n    /* 确保文本左对齐 */\r\n}\r\n\r\n.checkbox-group-left {\r\n    display: flex;\r\n    flex-direction: column;\r\n    /* 垂直排列复选框 */\r\n    align-items: flex-start;\r\n    /* 左对齐 */\r\n}\r\n\r\n.checkbox-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    /* 垂直排列复选框 */\r\n    align-items: flex-start;\r\n    /* 左对齐 */\r\n    /* justify-content: center; */\r\n    /* 垂直居中 */\r\n    height: 100%;\r\n    /* 确保容器高度为 100% */\r\n}\r\n\r\n.resize-button {\r\n    display: flex;\r\n    justify-content: center;\r\n    /* 水平居中 */\r\n    /* align-items: center; */\r\n    /* 垂直居中 */\r\n    height: 100vh;\r\n    /* 使容器占满整个视口高度 */\r\n    padding-top: 50px;\r\n}\r\n\r\n.img {\r\n    transition: opacity 0.5s ease-in-out;\r\n    opacity: 0;\r\n    /* 初始透明 */\r\n}\r\n\r\n.img.loaded {\r\n    opacity: 1;\r\n    /* 加载完成后不透明 */\r\n}\r\n\r\n.fixed-small-button {\r\n    width: 45.33px;\r\n    height: 32px;\r\n}\r\n</style>","import script from \"./DeviceViewer.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./DeviceViewer.vue?vue&type=script&lang=ts&setup=true\"\n\nimport \"./DeviceViewer.vue?vue&type=style&index=0&id=946c0bec&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-946c0bec\"]])\n\nexport default __exports__"],"names":["getAdbDevices","server","request","url","method","params","getDeviceIp","device_id","wakeUpDeviceByApi","rebootDeviceByApi","_hoisted_1","style","_hoisted_2","class","_hoisted_3","_hoisted_4","key","_hoisted_5","_defineComponent","__name","setup","__props","intervalId","globalFillRatio","ref","devices","webUILinkLoading","reloadButtonLoading","route","useRoute","computed","query","value","toString","serverAddress","split","serverName","name","checkedDevices","containsUpperCase","text","upperCaseRegex","test","onBeforeUnmount","clearInterval","onBeforeMount","async","reloadDevices","onMounted","setInterval","updateScreenshotUrls","undefined","response","result","data","map","item","udid","device_ip","screenshot_url","fill_ratio","show","includes","refreshLoading","wakeUpLoading","rebootLoading","device_ids","filter","changeCheckedDevices","forEach","element","document","getElementById","src","Date","getTime","checkAll","isIndeterminate","changeCheckAll","selectAll","checkedCount","length","copyUdid","navigator","clipboard","writeText","then","ElMessage","message","type","catch","error","openWebUi","window","open","resize","hideView","device","find","id","refreshDevice","setTimeout","wakeUpDevice","showClose","center","status","duration","rebootDevice","_ctx","_cache","_component_el_checkbox","_resolveComponent","_component_el_checkbox_group","_component_el_button","_component_el_aside","_component_el_empty","_component_el_col","_component_el_slider","_component_el_row","_component_CopyDocument","_component_el_icon","_component_el_tooltip","_component_ChromeFilled","_component_Refresh","_component_RefreshRight","_component_Sunrise","_component_el_button_group","_component_DeleteFilled","_component_el_space","_component_el_card","_component_el_main","_component_el_container","_openBlock","_createElementBlock","_createVNode","default","_withCtx","_createElementVNode","_toDisplayString","_unref","modelValue","$event","indeterminate","onChange","_createTextVNode","_","_isRef","_Fragment","_renderList","_createBlock","label","onClick","loading","_createCommentVNode","description","gutter","span","wrap","info","_normalizeStyle","width","draggable","vertical","min","max","step","effect","content","placement","__exports__"],"sourceRoot":""}