{"version":3,"file":"js/46.06193342.js","mappings":"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","sources":["webpack://debug-bridge-client-tasty/./src/api/server.ts","webpack://debug-bridge-client-tasty/./src/data/agent.ts","webpack://debug-bridge-client-tasty/./src/components/HomePage.vue?c6b5","webpack://debug-bridge-client-tasty/./src/components/HomePage.vue","webpack://debug-bridge-client-tasty/./src/components/HomePage.vue?8b1a"],"sourcesContent":["import request from '@/utils/request'\r\n\r\nexport function ping(server: string) {\r\n    return request({\r\n        url: `http://${server}/ping`,\r\n        method: 'get',\r\n        params: {}\r\n    });\r\n}\r\n\r\nexport function getPids(server: string) {\r\n    return request({\r\n        url: `http://${server}/bridge/pids`,\r\n        method: 'get',\r\n        params: {}\r\n    });\r\n}\r\n\r\nexport function getContentByPid(server: string, pid: string) {\r\n    return request({\r\n        url: `http://${server}/bridge/content/all?pid=${pid}`,\r\n        method: 'get',\r\n        params: {}\r\n    });\r\n}\r\n\r\nexport function getContentByQuery(server: string, pid: string, startLine: number, lineLength: number) {\r\n    return request({\r\n        url: `http://${server}/bridge/content?pid=${pid}&start_line=${startLine}&line_length=${lineLength}`,\r\n        method: 'get',\r\n        params: {}\r\n    });\r\n}\r\n\r\nexport function stopPid(server: string, pid: string) {\r\n    return request({\r\n        url: `http://${server}/bridge/pid/stop?pid=${pid}`,\r\n        method: 'post',\r\n        data: {}\r\n    });\r\n}\r\n\r\nexport function deletePid(server: string, pid: string) {\r\n    return request({\r\n        url: `http://${server}/bridge/pid/clear?pid=${pid}`,\r\n        method: 'post',\r\n        data: {}\r\n    });\r\n}\r\n\r\nexport function deleteAllPids(server: string) {\r\n    return request({\r\n        url: `http://${server}/bridge/pids/clear`,\r\n        method: 'post',\r\n        data: {}\r\n    });\r\n}\r\n\r\nexport function runCommand(server: string, commandText: string) {\r\n    return request({\r\n        url: `http://${server}/bridge/run`,\r\n        method: 'post',\r\n        data: {\r\n            command: commandText\r\n        }\r\n    });\r\n}","export function getAgentInfo() {\r\n    return [{\r\n        index: \"1\",\r\n        name: \"x415\",\r\n        defaultDirectory: \"C:\\\\agent\\\\_work\\\\1\\\\s\",\r\n        host: \"10.86.212.244\",\r\n        port: \"8001\",\r\n        defaultCommand: \"pytest --env=x415 --dut=platform_gandalf -k test_get_device_build_info\",\r\n        status: \"info\"\r\n    }, {\r\n        index: \"2\",\r\n        name: \"x416\",\r\n        defaultDirectory: \"C:\\\\agent\\\\_work\\\\1\\\\s\",\r\n        host: \"10.86.212.222\",\r\n        port: \"8001\",\r\n        defaultCommand: \"pytest --env=x416 --dut=platform_gandalf -k test_get_device_build_info\",\r\n        status: \"info\"\r\n    }, {\r\n        index: \"3\",\r\n        name: \"x417\",\r\n        defaultDirectory: \"C:\\\\agent\\\\_work\\\\9\\\\s\",\r\n        host: \"10.86.212.224\",\r\n        port: \"8001\",\r\n        defaultCommand: \"pytest --env=x417 --dut=platform_gandalf -k test_get_device_build_info\",\r\n        status: \"info\"\r\n    }, {\r\n        index: \"4\",\r\n        name: \"x425\",\r\n        defaultDirectory: \"C:\\\\agent\\\\_work\\\\8\\\\s\",\r\n        host: \"10.86.212.236\",\r\n        port: \"8001\",\r\n        defaultCommand: \"pytest --env=x425 --dut=platform_gandalf -k test_get_device_build_info\",\r\n        status: \"info\"\r\n    }, {\r\n        index: \"5\",\r\n        name: \"x426\",\r\n        defaultDirectory: \"C:\\\\agent\\\\_work\\\\8\\\\s\",\r\n        host: \"10.86.212.238\",\r\n        port: \"8001\",\r\n        defaultCommand: \"pytest --env=x426 --dut=platform_gandalf -k test_get_device_build_info\",\r\n        status: \"info\"\r\n    }, {\r\n        index: \"6\",\r\n        name: \"x427\",\r\n        defaultDirectory: \"C:\\\\agent\\\\_work\\\\4\\\\s\",\r\n        host: \"10.86.212.239\",\r\n        port: \"8001\",\r\n        defaultCommand: \"pytest --env=x427 --dut=platform_gandalf -k test_get_device_build_info\",\r\n        status: \"info\"\r\n    }]\r\n}","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, withCtx as _withCtx, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, createBlock as _createBlock, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle, resolveDirective as _resolveDirective, withDirectives as _withDirectives } from \"vue\"\n\nconst _hoisted_1 = { class: \"status-wrapper\" }\nconst _hoisted_2 = { key: 0 }\nconst _hoisted_3 = { class: \"mt-4\" }\nconst _hoisted_4 = [\"innerHTML\"]\nconst _hoisted_5 = { style: {\"padding-top\":\"20px\"} }\nconst _hoisted_6 = { key: 0 }\nconst _hoisted_7 = {\n  key: 0,\n  style: {\"margin-left\":\"5px\"}\n}\nconst _hoisted_8 = [\"src\"]\n\nimport { ref } from 'vue'\r\nimport { ElMessage } from 'element-plus';\r\nimport { onBeforeMount, onMounted } from 'vue';\r\nimport { ping, getPids, getContentByPid, getContentByQuery, stopPid, deletePid, deleteAllPids, runCommand } from \"@/api/server\";\r\nimport { getAgentInfo } from \"@/data/agent\";\r\n\r\ninterface Pid {\r\n    value: string;\r\n    label: string;\r\n}\r\nconst logQueryLength = 10;\r\nconst maxEmptyLogQuantity = 100;\r\nconst syncInterval = 800;\r\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'HomePage',\n  setup(__props) {\n\r\nconst agents = ref(getAgentInfo());\r\n\r\n// 定义设备接口\r\nconst pids = ref<Pid[]>([]);\r\n\r\nconst pingButtonLoading = ref(false);\r\nconst activeIndex = ref(\"0\");\r\nconst currentHost = ref(\"\");\r\nconst currentPort = ref(\"\");\r\nconst currentAgentConnected = ref(false);\r\nconst emptyDescription = ref(\"Please wait...\");\r\nconst windowHeight = window.innerHeight;\r\nconst command = ref('');\r\nconst directory = ref('');\r\nconst logContent = ref('');\r\nconst currentPid = ref('');\r\nconst loadLogButtonLoading = ref(false);\r\nconst logLength = ref(0);\r\nlet getLogIntervalId: number | undefined;\r\nconst screenshotUrl = ref(\"\");\r\nconst bigScreenshotUrl = ref(\"\");\r\nconst screenshotLoading = ref(true);\r\nlet getScreenshotIntervalId: number | undefined;\r\nconst refreshButtonDisabled = ref(false);\r\nconst dialogFormVisible = ref(false);\r\nconst logAreaColumnWidth = ref(24);\r\nconst screenshotColumnWidth = ref(0);\r\nconst screenshotVisible = ref(false);\r\n\r\nonBeforeMount(async () => {\r\n    await pingAgents();\r\n});\r\n\r\nonMounted(async () => {\r\n\r\n});\r\n\r\nconst pingAgents = async () => {\r\n    // 开始加载\r\n    pingButtonLoading.value = true;\r\n    activeIndex.value = \"0\";\r\n    screenshotLoading.value = true;\r\n\r\n    // 创建一个数组来存储所有的 ping 操作\r\n    const pingPromises = agents.value.map(async (agent) => {\r\n        agent.status = \"info\";\r\n        const result = await ping(`${agent.host}:${agent.port}`);\r\n        // 更新 agent 的在线状态\r\n        agent.status = result.data == \"success\" ? \"success\" : \"danger\";\r\n    });\r\n\r\n    // 等待所有的 ping 操作完成\r\n    await Promise.all(pingPromises);\r\n\r\n    const agent = await selectFirstConnectedAgent();\r\n\r\n    await takeScreenshot();\r\n\r\n    await getCurrentPid(agent);\r\n\r\n    // 所有操作完成后停止加载\r\n    pingButtonLoading.value = false;\r\n}\r\n\r\nconst takeScreenshot = async () => {\r\n    refreshButtonDisabled.value = true;\r\n    clearGetScreenshotInterval();\r\n\r\n    screenshotUrl.value = `http://${currentHost.value}:${currentPort.value}/bridge/screenshot?timestamp=${new Date().getTime()}`;\r\n    setTimeout(async () => {\r\n        screenshotLoading.value = false;\r\n        getScreenshotIntervalId = setInterval(async () => {\r\n            screenshotUrl.value = `http://${currentHost.value}:${currentPort.value}/bridge/screenshot?timestamp=${new Date().getTime()}`;\r\n        }, syncInterval);\r\n        refreshButtonDisabled.value = false;\r\n    }, 500);\r\n}\r\n\r\nconst popUpScreenshot = () => {\r\n    bigScreenshotUrl.value = screenshotUrl.value;\r\n    dialogFormVisible.value = true;\r\n}\r\n\r\nconst zoomInScreenshot = () => {\r\n    if (screenshotColumnWidth.value == 18) {\r\n        return;\r\n    }\r\n    logAreaColumnWidth.value -= 1;\r\n    screenshotColumnWidth.value += 1;\r\n}\r\n\r\nconst resizeScreenshot = () => {\r\n    logAreaColumnWidth.value = 14;\r\n    screenshotColumnWidth.value = 10;\r\n}\r\n\r\nconst showScreenshotArea = () => {\r\n    logAreaColumnWidth.value = 14;\r\n    screenshotColumnWidth.value = 10;\r\n\r\n    screenshotVisible.value = true;\r\n}\r\n\r\nconst hideScreenshotArea = () => {\r\n    logAreaColumnWidth.value = 24;\r\n    screenshotColumnWidth.value = 0;\r\n\r\n    screenshotVisible.value = false;\r\n}\r\n\r\nconst selectFirstConnectedAgent = async () => {\r\n    const agent = agents.value.find(item => item.status == \"success\");\r\n    if (!agent) {\r\n        return;\r\n    }\r\n    command.value = agent.defaultCommand;\r\n    directory.value = agent.defaultDirectory;\r\n\r\n    activeIndex.value = agent.index;\r\n    currentAgentConnected.value = true;\r\n    currentHost.value = agent.host;\r\n    currentPort.value = agent.port;\r\n    return agent;\r\n}\r\n\r\nconst getCurrentPid = async (agent: any = null) => {\r\n    const host = agent == null ? currentHost.value : agent.host;\r\n    const port = agent == null ? currentPort.value : agent.port;\r\n    const response = await getPids(`${host}:${port}`);\r\n    const result = response.data ? response.data : [];\r\n    pids.value = result.pids.map((item: any) => ({\r\n        value: item,\r\n        label: item\r\n    }));\r\n    currentPid.value = pids.value.length > 0 ? pids.value[0].value : \"\";\r\n}\r\n\r\nconst useAgent = async (agent: any) => {\r\n    currentAgentConnected.value = false;\r\n    emptyDescription.value = \"Please wait...\";\r\n    currentHost.value = agent.host;\r\n    currentPort.value = agent.port;\r\n    command.value = \"\";\r\n    directory.value = \"\";\r\n    logContent.value = \"\";\r\n    const result = await ping(`${agent.host}:${agent.port}`);\r\n    if (\"success\" != result.data) {\r\n        emptyDescription.value = \"The server is disconnected!\";\r\n        return\r\n    }\r\n    command.value = agent.defaultCommand;\r\n    directory.value = agent.defaultDirectory;\r\n    currentAgentConnected.value = true;\r\n    await getCurrentPid(agent);\r\n}\r\n\r\nconst openDeviceViewer = (status: string, name: string, host: string, port: string) => {\r\n    if (\"success\" == status) {\r\n        window.open(`/viewer?name=${name}&server=${host}:${port}`, '_blank');\r\n    }\r\n}\r\n\r\nconst copyCommand = () => {\r\n    navigator.clipboard.writeText(command.value)\r\n        .then(() => {\r\n            ElMessage({\r\n                message: 'Command is copied to clipboard.',\r\n                type: 'success',\r\n            });\r\n        })\r\n        .catch(() => {\r\n            ElMessage.error('Oops, failed to copy command to clipboard.');\r\n        });\r\n}\r\n\r\nconst conductCommand = async () => {\r\n    const commandText = `cd ${directory.value} && ${command.value}`;\r\n    const response = await runCommand(`${currentHost.value}:${currentPort.value}`, commandText);\r\n    if (\"success\" == response.data.status) {\r\n        await getCurrentPid();\r\n        ElMessage({\r\n            message: 'Command is conducted.',\r\n            type: 'success',\r\n        });\r\n        await loadLog();\r\n        return;\r\n    }\r\n    ElMessage.error('Oops, failed to conduct command.');\r\n}\r\n\r\nconst copyDirectory = () => {\r\n    navigator.clipboard.writeText(directory.value)\r\n        .then(() => {\r\n            ElMessage({\r\n                message: 'Directory is copied to clipboard.',\r\n                type: 'success',\r\n            });\r\n        })\r\n        .catch(() => {\r\n            ElMessage.error('Oops, failed to copy directory to clipboard.');\r\n        });\r\n}\r\n\r\nconst clearGetLogInterval = () => {\r\n    if (undefined != getLogIntervalId) {\r\n        clearInterval(getLogIntervalId);\r\n    }\r\n}\r\n\r\nconst clearGetScreenshotInterval = () => {\r\n    if (undefined != getScreenshotIntervalId) {\r\n        clearInterval(getScreenshotIntervalId);\r\n    }\r\n}\r\n\r\nconst loadLog = async () => {\r\n    clearGetLogInterval();\r\n\r\n    logContent.value = \"\";\r\n    logLength.value = 0;\r\n    await getLogByPid();\r\n    logLength.value += 1;\r\n    let emptyLogQuantity = 0;\r\n    getLogIntervalId = setInterval(async () => {\r\n        const response = await getContentByQuery(`${currentHost.value}:${currentPort.value}`, currentPid.value, logLength.value, logQueryLength);\r\n        if (response.data.content.length != 0) {\r\n            emptyLogQuantity = 0;\r\n            logLength.value += response.data.content.length;\r\n            colorLog(response.data.content);\r\n            return;\r\n        }\r\n        emptyLogQuantity += 1;\r\n        if (emptyLogQuantity == maxEmptyLogQuantity) {\r\n            clearInterval(getLogIntervalId);\r\n        }\r\n    }, syncInterval);\r\n}\r\n\r\nconst getLogByPid = async () => {\r\n    loadLogButtonLoading.value = true;\r\n    logContent.value = \"\";\r\n    logLength.value = 0;\r\n    const response = await getContentByPid(`${currentHost.value}:${currentPort.value}`, currentPid.value);\r\n    logLength.value = response.data.content.length;\r\n\r\n    logContent.value += `<span style=\"background-color: yellow\">${response.data.command}</span><br/>`;\r\n    colorLog(response.data.content);\r\n    loadLogButtonLoading.value = false;\r\n}\r\n\r\nconst colorLog = (content: any[]) => {\r\n    content.forEach((item: any) => {\r\n        const lowerCaseMessage = item.toLowerCase();\r\n        if (lowerCaseMessage.indexOf(\"error\") > -1 || lowerCaseMessage.indexOf(\"fail\") > -1) {\r\n            logContent.value += `<span style=\"background-color: red;color='white'\">${lowerCaseMessage}</span><br/>`;\r\n            return;\r\n        }\r\n        if (lowerCaseMessage.indexOf(\"passed\") > -1 || lowerCaseMessage.indexOf(\"success\") > -1) {\r\n            logContent.value += `<span style=\"background-color: lightgreen\">${lowerCaseMessage}</span><br/>`;\r\n            return;\r\n        }\r\n        logContent.value += `<span>${lowerCaseMessage}</span><br/>`;\r\n    });\r\n}\r\n\r\nconst stopCurrentPid = async () => {\r\n    clearGetLogInterval();\r\n\r\n    const response = await stopPid(`${currentHost.value}:${currentPort.value}`, currentPid.value);\r\n    if (\"success\" == response.data.status) {\r\n        await getCurrentPid();\r\n        ElMessage({\r\n            message: 'Current process is stopped.',\r\n            type: 'success',\r\n        });\r\n        return;\r\n    }\r\n    ElMessage.error('Oops, failed to stop current process.');\r\n}\r\n\r\nconst deleteCurrentPid = async () => {\r\n    clearGetLogInterval();\r\n\r\n    const response = await deletePid(`${currentHost.value}:${currentPort.value}`, currentPid.value);\r\n    if (\"success\" == response.data.status) {\r\n        await getCurrentPid();\r\n        ElMessage({\r\n            message: 'Current process is terminated.',\r\n            type: 'success',\r\n        });\r\n        logContent.value = \"\";\r\n        return;\r\n    }\r\n    ElMessage.error('Oops, failed to terminate current process.');\r\n}\r\n\r\nconst deletePids = async () => {\r\n    clearGetLogInterval();\r\n\r\n    const response = await deleteAllPids(`${currentHost.value}:${currentPort.value}`);\r\n    if (\"success\" == response.data.status) {\r\n        await getCurrentPid();\r\n        ElMessage({\r\n            message: 'All processes are terminated.',\r\n            type: 'success',\r\n        });\r\n        logContent.value = \"\";\r\n        return;\r\n    }\r\n    ElMessage.error('Oops, failed to terminate all processes.');\r\n}\r\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_el_badge = _resolveComponent(\"el-badge\")!\n  const _component_Cellphone = _resolveComponent(\"Cellphone\")!\n  const _component_el_icon = _resolveComponent(\"el-icon\")!\n  const _component_el_menu_item = _resolveComponent(\"el-menu-item\")!\n  const _component_el_menu = _resolveComponent(\"el-menu\")!\n  const _component_el_button = _resolveComponent(\"el-button\")!\n  const _component_el_aside = _resolveComponent(\"el-aside\")!\n  const _component_el_empty = _resolveComponent(\"el-empty\")!\n  const _component_FolderOpened = _resolveComponent(\"FolderOpened\")!\n  const _component_CopyDocument = _resolveComponent(\"CopyDocument\")!\n  const _component_el_tooltip = _resolveComponent(\"el-tooltip\")!\n  const _component_el_input = _resolveComponent(\"el-input\")!\n  const _component_Operation = _resolveComponent(\"Operation\")!\n  const _component_Pointer = _resolveComponent(\"Pointer\")!\n  const _component_el_option = _resolveComponent(\"el-option\")!\n  const _component_el_select = _resolveComponent(\"el-select\")!\n  const _component_el_button_group = _resolveComponent(\"el-button-group\")!\n  const _component_View = _resolveComponent(\"View\")!\n  const _component_el_col = _resolveComponent(\"el-col\")!\n  const _component_FullScreen = _resolveComponent(\"FullScreen\")!\n  const _component_ZoomIn = _resolveComponent(\"ZoomIn\")!\n  const _component_Aim = _resolveComponent(\"Aim\")!\n  const _component_Refresh = _resolveComponent(\"Refresh\")!\n  const _component_Hide = _resolveComponent(\"Hide\")!\n  const _component_el_row = _resolveComponent(\"el-row\")!\n  const _component_el_main = _resolveComponent(\"el-main\")!\n  const _component_el_container = _resolveComponent(\"el-container\")!\n  const _component_el_image = _resolveComponent(\"el-image\")!\n  const _component_el_dialog = _resolveComponent(\"el-dialog\")!\n  const _directive_loading = _resolveDirective(\"loading\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", null, [\n    _createVNode(_component_el_container, { style: {\"display\":\"flex\"} }, {\n      default: _withCtx(() => [\n        _createVNode(_component_el_aside, {\n          style: _normalizeStyle({ 'background-color': '#001f3f', width: '200px', 'margin': 0, 'padding': 0, height: _unref(windowHeight) + 'px' })\n        }, {\n          default: _withCtx(() => [\n            _createElementVNode(\"div\", null, [\n              _createVNode(_component_el_menu, {\n                \"active-text-color\": \"#ffd04b\",\n                \"background-color\": \"#001f3f\",\n                class: \"el-menu-vertical-demo\",\n                \"default-active\": activeIndex.value,\n                \"text-color\": \"#fff\",\n                style: { width: '200px' }\n              }, {\n                default: _withCtx(() => [\n                  (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(agents.value, (agent) => {\n                    return (_openBlock(), _createBlock(_component_el_menu_item, {\n                      key: agent.name,\n                      index: agent.index,\n                      onClick: ($event: any) => (useAgent(agent))\n                    }, {\n                      default: _withCtx(() => [\n                        _createElementVNode(\"div\", _hoisted_1, [\n                          _createVNode(_component_el_badge, {\n                            \"is-dot\": \"\",\n                            class: \"status-dot\",\n                            type: agent.status\n                          }, null, 8, [\"type\"]),\n                          _createElementVNode(\"span\", null, [\n                            _createTextVNode(_toDisplayString(agent.name) + \" (\" + _toDisplayString(agent.host) + \") \", 1),\n                            _createVNode(_component_el_icon, {\n                              onClick: ($event: any) => (openDeviceViewer(agent.status, agent.name, agent.host, agent.port))\n                            }, {\n                              default: _withCtx(() => [\n                                _createVNode(_component_Cellphone)\n                              ]),\n                              _: 2\n                            }, 1032, [\"onClick\"])\n                          ])\n                        ])\n                      ]),\n                      _: 2\n                    }, 1032, [\"index\", \"onClick\"]))\n                  }), 128))\n                ]),\n                _: 1\n              }, 8, [\"default-active\"])\n            ]),\n            _createVNode(_component_el_button, {\n              type: \"primary\",\n              onClick: pingAgents,\n              loading: pingButtonLoading.value\n            }, {\n              default: _withCtx(() => [\n                (!pingButtonLoading.value)\n                  ? (_openBlock(), _createElementBlock(\"span\", _hoisted_2, \"Ping\"))\n                  : _createCommentVNode(\"\", true)\n              ]),\n              _: 1\n            }, 8, [\"loading\"])\n          ]),\n          _: 1\n        }, 8, [\"style\"]),\n        _createVNode(_component_el_main, null, {\n          default: _withCtx(() => [\n            (!currentAgentConnected.value)\n              ? (_openBlock(), _createBlock(_component_el_empty, {\n                  key: 0,\n                  description: emptyDescription.value\n                }, null, 8, [\"description\"]))\n              : _createCommentVNode(\"\", true),\n            (currentAgentConnected.value)\n              ? (_openBlock(), _createBlock(_component_el_row, {\n                  key: 1,\n                  gutter: \"1\"\n                }, {\n                  default: _withCtx(() => [\n                    _createVNode(_component_el_col, { span: logAreaColumnWidth.value }, {\n                      default: _withCtx(() => [\n                        _createElementVNode(\"div\", _hoisted_3, [\n                          _createVNode(_component_el_input, {\n                            modelValue: directory.value,\n                            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((directory).value = $event)),\n                            class: \"input-with-select\",\n                            clearable: \"\"\n                          }, {\n                            prepend: _withCtx(() => [\n                              _createVNode(_component_el_icon, null, {\n                                default: _withCtx(() => [\n                                  _createVNode(_component_FolderOpened)\n                                ]),\n                                _: 1\n                              })\n                            ]),\n                            append: _withCtx(() => [\n                              _createVNode(_component_el_tooltip, {\n                                class: \"box-item\",\n                                effect: \"dark\",\n                                content: \"Copy\",\n                                placement: \"right\"\n                              }, {\n                                default: _withCtx(() => [\n                                  _createVNode(_component_el_button, { onClick: copyDirectory }, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_el_icon, null, {\n                                        default: _withCtx(() => [\n                                          _createVNode(_component_CopyDocument)\n                                        ]),\n                                        _: 1\n                                      })\n                                    ]),\n                                    _: 1\n                                  })\n                                ]),\n                                _: 1\n                              })\n                            ]),\n                            _: 1\n                          }, 8, [\"modelValue\"]),\n                          _createVNode(_component_el_input, {\n                            modelValue: command.value,\n                            \"onUpdate:modelValue\": _cache[1] || (_cache[1] = ($event: any) => ((command).value = $event)),\n                            class: \"input-with-select\",\n                            clearable: \"\",\n                            style: {\"padding-top\":\"5px\",\"padding-bottom\":\"5px\"}\n                          }, {\n                            prepend: _withCtx(() => [\n                              _createVNode(_component_el_button, { onClick: copyCommand }, {\n                                default: _withCtx(() => [\n                                  _createVNode(_component_el_icon, null, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_Operation)\n                                    ]),\n                                    _: 1\n                                  })\n                                ]),\n                                _: 1\n                              })\n                            ]),\n                            append: _withCtx(() => [\n                              _createVNode(_component_el_tooltip, {\n                                class: \"box-item\",\n                                effect: \"dark\",\n                                content: \"Conduct\",\n                                placement: \"right\"\n                              }, {\n                                default: _withCtx(() => [\n                                  _createVNode(_component_el_button, { onClick: conductCommand }, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_el_icon, null, {\n                                        default: _withCtx(() => [\n                                          _createVNode(_component_Pointer)\n                                        ]),\n                                        _: 1\n                                      })\n                                    ]),\n                                    _: 1\n                                  })\n                                ]),\n                                _: 1\n                              })\n                            ]),\n                            _: 1\n                          }, 8, [\"modelValue\"])\n                        ]),\n                        _createElementVNode(\"div\", {\n                          contenteditable: \"true\",\n                          innerHTML: logContent.value,\n                          class: \"editable-area\",\n                          placeholder: \"This is logging area\"\n                        }, null, 8, _hoisted_4),\n                        _createElementVNode(\"div\", _hoisted_5, [\n                          _cache[9] || (_cache[9] = _createTextVNode(\" PIDs: \")),\n                          _createVNode(_component_el_select, {\n                            modelValue: currentPid.value,\n                            \"onUpdate:modelValue\": _cache[2] || (_cache[2] = ($event: any) => ((currentPid).value = $event)),\n                            class: \"m-2\",\n                            placeholder: \"No data\",\n                            size: \"medium\",\n                            style: {\"width\":\"200px\"}\n                          }, {\n                            default: _withCtx(() => [\n                              (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(pids.value, (item) => {\n                                return (_openBlock(), _createBlock(_component_el_option, {\n                                  key: item.value,\n                                  label: item.label,\n                                  value: item.value\n                                }, null, 8, [\"label\", \"value\"]))\n                              }), 128))\n                            ]),\n                            _: 1\n                          }, 8, [\"modelValue\"]),\n                          _createVNode(_component_el_button_group, { class: \"ml-4\" }, {\n                            default: _withCtx(() => [\n                              _createVNode(_component_el_button, {\n                                type: \"danger\",\n                                disabled: !currentPid.value,\n                                onClick: stopCurrentPid\n                              }, {\n                                default: _withCtx(() => _cache[5] || (_cache[5] = [\n                                  _createTextVNode(\"Stop\")\n                                ])),\n                                _: 1\n                              }, 8, [\"disabled\"]),\n                              _createVNode(_component_el_button, {\n                                type: \"danger\",\n                                disabled: !currentPid.value,\n                                onClick: deleteCurrentPid\n                              }, {\n                                default: _withCtx(() => _cache[6] || (_cache[6] = [\n                                  _createTextVNode(\"Delete\")\n                                ])),\n                                _: 1\n                              }, 8, [\"disabled\"]),\n                              _createVNode(_component_el_button, {\n                                type: \"danger\",\n                                disabled: pids.value.length == 0,\n                                onClick: deletePids\n                              }, {\n                                default: _withCtx(() => _cache[7] || (_cache[7] = [\n                                  _createTextVNode(\"Delete All\")\n                                ])),\n                                _: 1\n                              }, 8, [\"disabled\"])\n                            ]),\n                            _: 1\n                          }),\n                          _createVNode(_component_el_button_group, {\n                            class: \"ml-4\",\n                            style: {\"padding-left\":\"10px\"}\n                          }, {\n                            default: _withCtx(() => [\n                              _createVNode(_component_el_button, {\n                                type: \"info\",\n                                onClick: _cache[3] || (_cache[3] = ($event: any) => (logContent.value = ''))\n                              }, {\n                                default: _withCtx(() => _cache[8] || (_cache[8] = [\n                                  _createTextVNode(\"Clear Log\")\n                                ])),\n                                _: 1\n                              }),\n                              _createVNode(_component_el_button, {\n                                type: \"success\",\n                                onClick: loadLog,\n                                disabled: !currentPid.value,\n                                loading: loadLogButtonLoading.value\n                              }, {\n                                default: _withCtx(() => [\n                                  (!loadLogButtonLoading.value)\n                                    ? (_openBlock(), _createElementBlock(\"span\", _hoisted_6, \"Load Log\"))\n                                    : _createCommentVNode(\"\", true)\n                                ]),\n                                _: 1\n                              }, 8, [\"disabled\", \"loading\"])\n                            ]),\n                            _: 1\n                          }),\n                          _createVNode(_component_el_button_group, { style: {\"padding-left\":\"10px\"} }, {\n                            default: _withCtx(() => [\n                              (!screenshotVisible.value)\n                                ? (_openBlock(), _createBlock(_component_el_button, {\n                                    key: 0,\n                                    type: \"primary\",\n                                    onClick: showScreenshotArea\n                                  }, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_el_icon, null, {\n                                        default: _withCtx(() => [\n                                          _createVNode(_component_View)\n                                        ]),\n                                        _: 1\n                                      })\n                                    ]),\n                                    _: 1\n                                  }))\n                                : _createCommentVNode(\"\", true)\n                            ]),\n                            _: 1\n                          })\n                        ])\n                      ]),\n                      _: 1\n                    }, 8, [\"span\"]),\n                    _createVNode(_component_el_col, { span: screenshotColumnWidth.value }, {\n                      default: _withCtx(() => [\n                        (screenshotVisible.value)\n                          ? _withDirectives((_openBlock(), _createElementBlock(\"div\", _hoisted_7, [\n                              _cache[10] || (_cache[10] = _createElementVNode(\"div\", { style: {\"height\":\"74px\"} }, null, -1)),\n                              _createElementVNode(\"img\", {\n                                class: \"screenshot\",\n                                id: \"screenshotImg\",\n                                draggable: \"false\",\n                                src: screenshotUrl.value\n                              }, null, 8, _hoisted_8),\n                              _createVNode(_component_el_button_group, {\n                                class: \"ml-4\",\n                                style: {\"padding-top\":\"30px\"}\n                              }, {\n                                default: _withCtx(() => [\n                                  _createVNode(_component_el_tooltip, {\n                                    class: \"box-item\",\n                                    effect: \"dark\",\n                                    content: \"Pop Up\",\n                                    placement: \"left\"\n                                  }, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_el_button, {\n                                        type: \"primary\",\n                                        onClick: popUpScreenshot\n                                      }, {\n                                        default: _withCtx(() => [\n                                          _createVNode(_component_el_icon, null, {\n                                            default: _withCtx(() => [\n                                              _createVNode(_component_FullScreen)\n                                            ]),\n                                            _: 1\n                                          })\n                                        ]),\n                                        _: 1\n                                      })\n                                    ]),\n                                    _: 1\n                                  }),\n                                  _createVNode(_component_el_tooltip, {\n                                    class: \"box-item\",\n                                    effect: \"dark\",\n                                    content: \"Zoom In\",\n                                    placement: \"bottom\"\n                                  }, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_el_button, {\n                                        type: \"primary\",\n                                        onClick: zoomInScreenshot\n                                      }, {\n                                        default: _withCtx(() => [\n                                          _createVNode(_component_el_icon, null, {\n                                            default: _withCtx(() => [\n                                              _createVNode(_component_ZoomIn)\n                                            ]),\n                                            _: 1\n                                          })\n                                        ]),\n                                        _: 1\n                                      })\n                                    ]),\n                                    _: 1\n                                  }),\n                                  _createVNode(_component_el_tooltip, {\n                                    class: \"box-item\",\n                                    effect: \"dark\",\n                                    content: \"Resize\",\n                                    placement: \"bottom\"\n                                  }, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_el_button, {\n                                        type: \"primary\",\n                                        onClick: resizeScreenshot\n                                      }, {\n                                        default: _withCtx(() => [\n                                          _createVNode(_component_el_icon, null, {\n                                            default: _withCtx(() => [\n                                              _createVNode(_component_Aim)\n                                            ]),\n                                            _: 1\n                                          })\n                                        ]),\n                                        _: 1\n                                      })\n                                    ]),\n                                    _: 1\n                                  }),\n                                  _createVNode(_component_el_tooltip, {\n                                    class: \"box-item\",\n                                    effect: \"dark\",\n                                    content: \"Refresh\",\n                                    placement: \"bottom\"\n                                  }, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_el_button, {\n                                        type: \"primary\",\n                                        onClick: takeScreenshot,\n                                        disabled: refreshButtonDisabled.value\n                                      }, {\n                                        default: _withCtx(() => [\n                                          _createVNode(_component_el_icon, null, {\n                                            default: _withCtx(() => [\n                                              _createVNode(_component_Refresh)\n                                            ]),\n                                            _: 1\n                                          })\n                                        ]),\n                                        _: 1\n                                      }, 8, [\"disabled\"])\n                                    ]),\n                                    _: 1\n                                  }),\n                                  (screenshotVisible.value)\n                                    ? (_openBlock(), _createBlock(_component_el_tooltip, {\n                                        key: 0,\n                                        class: \"box-item\",\n                                        effect: \"dark\",\n                                        content: \"Hide\",\n                                        placement: \"right\"\n                                      }, {\n                                        default: _withCtx(() => [\n                                          _createVNode(_component_el_button, {\n                                            type: \"primary\",\n                                            onClick: hideScreenshotArea\n                                          }, {\n                                            default: _withCtx(() => [\n                                              _createVNode(_component_el_icon, null, {\n                                                default: _withCtx(() => [\n                                                  _createVNode(_component_Hide)\n                                                ]),\n                                                _: 1\n                                              })\n                                            ]),\n                                            _: 1\n                                          })\n                                        ]),\n                                        _: 1\n                                      }))\n                                    : _createCommentVNode(\"\", true)\n                                ]),\n                                _: 1\n                              })\n                            ])), [\n                              [_directive_loading, screenshotLoading.value]\n                            ])\n                          : _createCommentVNode(\"\", true)\n                      ]),\n                      _: 1\n                    }, 8, [\"span\"])\n                  ]),\n                  _: 1\n                }))\n              : _createCommentVNode(\"\", true)\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _cache[11] || (_cache[11] = _createElementVNode(\"canvas\", {\n      id: \"canvas\",\n      style: {\"display\":\"none\"}\n    }, null, -1)),\n    _createVNode(_component_el_dialog, {\n      modelValue: dialogFormVisible.value,\n      \"onUpdate:modelValue\": _cache[4] || (_cache[4] = ($event: any) => ((dialogFormVisible).value = $event)),\n      modal: true,\n      title: \"SCREENSHOT\",\n      width: \"70%\",\n      draggable: \"\",\n      \"align-center\": \"\"\n    }, {\n      default: _withCtx(() => [\n        _createVNode(_component_el_image, {\n          src: bigScreenshotUrl.value,\n          fit: \"fill\",\n          id: \"screenshotImg-zoom-in\",\n          draggable: \"false\"\n        }, null, 8, [\"src\"])\n      ]),\n      _: 1\n    }, 8, [\"modelValue\"])\n  ]))\n}\n}\n\n})","<template>\r\n    <div>\r\n        <el-container style=\"display: flex;\">\r\n            <el-aside\r\n                :style=\"{ 'background-color': '#001f3f', width: '200px', 'margin': 0, 'padding': 0, height: windowHeight + 'px' }\">\r\n                <div>\r\n                    <el-menu active-text-color=\"#ffd04b\" background-color=\"#001f3f\" class=\"el-menu-vertical-demo\"\r\n                        :default-active=\"activeIndex\" text-color=\"#fff\" :style=\"{ width: '200px' }\">\r\n                        <el-menu-item v-for=\"agent in agents\" :key=\"agent.name\" :index=\"agent.index\"\r\n                            @click=\"useAgent(agent)\">\r\n                            <div class=\"status-wrapper\">\r\n                                <el-badge is-dot class=\"status-dot\" :type=\"agent.status\" />\r\n                                <span>{{ agent.name }} ({{ agent.host }})\r\n                                    <el-icon\r\n                                        @click=\"openDeviceViewer(agent.status, agent.name, agent.host, agent.port)\">\r\n                                        <Cellphone />\r\n                                    </el-icon>\r\n                                </span>\r\n                            </div>\r\n                        </el-menu-item>\r\n                    </el-menu>\r\n                </div>\r\n                <el-button type=\"primary\" @click=\"pingAgents\" :loading=\"pingButtonLoading\">\r\n                    <span v-if=\"!pingButtonLoading\">Ping</span>\r\n                </el-button>\r\n            </el-aside>\r\n\r\n            <el-main>\r\n                <el-empty :description=\"emptyDescription\" v-if=\"!currentAgentConnected\" />\r\n                <el-row gutter=\"1\" v-if=\"currentAgentConnected\">\r\n                    <el-col :span=\"logAreaColumnWidth\">\r\n                        <div class=\"mt-4\">\r\n                            <el-input v-model=\"directory\" class=\"input-with-select\" clearable>\r\n                                <template #prepend>\r\n                                    <el-icon>\r\n                                        <FolderOpened />\r\n                                    </el-icon>\r\n                                </template>\r\n                                <template #append>\r\n                                    <el-tooltip class=\"box-item\" effect=\"dark\" content=\"Copy\" placement=\"right\">\r\n                                        <el-button @click=\"copyDirectory\">\r\n                                            <el-icon>\r\n                                                <CopyDocument />\r\n                                            </el-icon>\r\n                                        </el-button>\r\n                                    </el-tooltip>\r\n                                </template>\r\n                            </el-input>\r\n                            <el-input v-model=\"command\" class=\"input-with-select\" clearable\r\n                                style=\"padding-top: 5px;padding-bottom: 5px;\">\r\n                                <template #prepend>\r\n                                    <el-button @click=\"copyCommand\">\r\n                                        <el-icon>\r\n                                            <Operation />\r\n                                        </el-icon>\r\n                                    </el-button>\r\n                                </template>\r\n                                <template #append>\r\n                                    <el-tooltip class=\"box-item\" effect=\"dark\" content=\"Conduct\" placement=\"right\">\r\n                                        <el-button @click=\"conductCommand\">\r\n                                            <el-icon>\r\n                                                <Pointer />\r\n                                            </el-icon>\r\n                                        </el-button>\r\n                                    </el-tooltip>\r\n                                </template>\r\n                            </el-input>\r\n                        </div>\r\n\r\n                        <div contenteditable=\"true\" v-html=\"logContent\" class=\"editable-area\"\r\n                            placeholder=\"This is logging area\"></div>\r\n\r\n                        <!-- footer -->\r\n                        <div style=\"padding-top: 20px;\">\r\n                            PIDs:\r\n                            <el-select v-model=\"currentPid\" class=\"m-2\" placeholder=\"No data\" size=\"medium\"\r\n                                style=\"width: 200px;\">\r\n                                <el-option v-for=\"item in pids\" :key=\"item.value\" :label=\"item.label\"\r\n                                    :value=\"item.value\" />\r\n                            </el-select>\r\n                            <el-button-group class=\"ml-4\">\r\n                                <el-button type=\"danger\" :disabled=\"!currentPid\"\r\n                                    @click=\"stopCurrentPid\">Stop</el-button>\r\n                                <el-button type=\"danger\" :disabled=\"!currentPid\"\r\n                                    @click=\"deleteCurrentPid\">Delete</el-button>\r\n                                <el-button type=\"danger\" :disabled=\"pids.length == 0\" @click=\"deletePids\">Delete\r\n                                    All</el-button>\r\n                            </el-button-group>\r\n                            <el-button-group class=\"ml-4\" style=\"padding-left: 10px;\">\r\n                                <el-button type=\"info\" @click=\"logContent = ''\">Clear Log</el-button>\r\n                                <el-button type=\"success\" @click=\"loadLog\" :disabled=\"!currentPid\"\r\n                                    :loading=\"loadLogButtonLoading\">\r\n                                    <span v-if=\"!loadLogButtonLoading\">Load Log</span>\r\n                                </el-button>\r\n                            </el-button-group>\r\n\r\n                            <el-button-group style=\"padding-left: 10px;\">\r\n                                <el-button type=\"primary\" @click=\"showScreenshotArea\" v-if=\"!screenshotVisible\">\r\n                                    <el-icon>\r\n                                        <View />\r\n                                    </el-icon>\r\n                                </el-button>\r\n                            </el-button-group>\r\n                        </div>\r\n                    </el-col>\r\n\r\n                    <!-- screenshot -->\r\n                    <el-col :span=\"screenshotColumnWidth\">\r\n                        <div v-loading=\"screenshotLoading\" v-if=\"screenshotVisible\" style=\"margin-left: 5px;\">\r\n                            <div style=\"height: 74px;\"></div>\r\n                            <img class=\"screenshot\" id=\"screenshotImg\" draggable=\"false\" :src=\"screenshotUrl\" />\r\n\r\n                            <el-button-group class=\"ml-4\" style=\"padding-top: 30px;\">\r\n                                <el-tooltip class=\"box-item\" effect=\"dark\" content=\"Pop Up\" placement=\"left\">\r\n                                    <el-button type=\"primary\" @click=\"popUpScreenshot\">\r\n                                        <el-icon>\r\n                                            <FullScreen />\r\n                                        </el-icon>\r\n                                    </el-button>\r\n                                </el-tooltip>\r\n                                <el-tooltip class=\"box-item\" effect=\"dark\" content=\"Zoom In\" placement=\"bottom\">\r\n                                    <el-button type=\"primary\" @click=\"zoomInScreenshot\">\r\n                                        <el-icon>\r\n                                            <ZoomIn />\r\n                                        </el-icon>\r\n                                    </el-button>\r\n                                </el-tooltip>\r\n                                <el-tooltip class=\"box-item\" effect=\"dark\" content=\"Resize\" placement=\"bottom\">\r\n                                    <el-button type=\"primary\" @click=\"resizeScreenshot\">\r\n                                        <el-icon>\r\n                                            <Aim />\r\n                                        </el-icon>\r\n                                    </el-button>\r\n                                </el-tooltip>\r\n                                <el-tooltip class=\"box-item\" effect=\"dark\" content=\"Refresh\" placement=\"bottom\">\r\n                                    <el-button type=\"primary\" @click=\"takeScreenshot\" :disabled=\"refreshButtonDisabled\">\r\n                                        <el-icon>\r\n                                            <Refresh />\r\n                                        </el-icon>\r\n                                    </el-button>\r\n                                </el-tooltip>\r\n                                <!-- <el-tooltip class=\"box-item\" effect=\"dark\" content=\"Live\" placement=\"right\">\r\n                                    <el-button type=\"primary\" @click=\"\">\r\n                                        <el-icon>\r\n                                            <VideoPlay />\r\n                                        </el-icon>\r\n                                    </el-button>\r\n                                </el-tooltip> -->\r\n                                <el-tooltip class=\"box-item\" effect=\"dark\" content=\"Hide\" placement=\"right\"\r\n                                    v-if=\"screenshotVisible\">\r\n                                    <el-button type=\"primary\" @click=\"hideScreenshotArea\">\r\n                                        <el-icon>\r\n                                            <Hide />\r\n                                        </el-icon>\r\n                                    </el-button>\r\n                                </el-tooltip>\r\n                            </el-button-group>\r\n                        </div>\r\n                    </el-col>\r\n                </el-row>\r\n            </el-main>\r\n        </el-container>\r\n\r\n        <!-- zoom in dialog -->\r\n        <canvas id=\"canvas\" style=\"display: none;\"></canvas>\r\n        <el-dialog v-model=\"dialogFormVisible\" :modal=\"true\" title=\"SCREENSHOT\" width=\"70%\" draggable align-center>\r\n            <el-image :src=\"bigScreenshotUrl\" fit=\"fill\" id=\"screenshotImg-zoom-in\" draggable=\"false\" />\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\" setup>\r\nimport { ref } from 'vue'\r\nimport { ElMessage } from 'element-plus';\r\nimport { onBeforeMount, onMounted } from 'vue';\r\nimport { ping, getPids, getContentByPid, getContentByQuery, stopPid, deletePid, deleteAllPids, runCommand } from \"@/api/server\";\r\nimport { getAgentInfo } from \"@/data/agent\";\r\n\r\nconst agents = ref(getAgentInfo());\r\n\r\n// 定义设备接口\r\ninterface Pid {\r\n    value: string;\r\n    label: string;\r\n}\r\nconst pids = ref<Pid[]>([]);\r\n\r\nconst pingButtonLoading = ref(false);\r\nconst activeIndex = ref(\"0\");\r\nconst currentHost = ref(\"\");\r\nconst currentPort = ref(\"\");\r\nconst currentAgentConnected = ref(false);\r\nconst emptyDescription = ref(\"Please wait...\");\r\nconst windowHeight = window.innerHeight;\r\nconst command = ref('');\r\nconst directory = ref('');\r\nconst logContent = ref('');\r\nconst currentPid = ref('');\r\nconst loadLogButtonLoading = ref(false);\r\nconst logLength = ref(0);\r\nconst logQueryLength = 10;\r\nconst maxEmptyLogQuantity = 100;\r\nconst syncInterval = 800;\r\nlet getLogIntervalId: number | undefined;\r\nconst screenshotUrl = ref(\"\");\r\nconst bigScreenshotUrl = ref(\"\");\r\nconst screenshotLoading = ref(true);\r\nlet getScreenshotIntervalId: number | undefined;\r\nconst refreshButtonDisabled = ref(false);\r\nconst dialogFormVisible = ref(false);\r\nconst logAreaColumnWidth = ref(24);\r\nconst screenshotColumnWidth = ref(0);\r\nconst screenshotVisible = ref(false);\r\n\r\nonBeforeMount(async () => {\r\n    await pingAgents();\r\n});\r\n\r\nonMounted(async () => {\r\n\r\n});\r\n\r\nconst pingAgents = async () => {\r\n    // 开始加载\r\n    pingButtonLoading.value = true;\r\n    activeIndex.value = \"0\";\r\n    screenshotLoading.value = true;\r\n\r\n    // 创建一个数组来存储所有的 ping 操作\r\n    const pingPromises = agents.value.map(async (agent) => {\r\n        agent.status = \"info\";\r\n        const result = await ping(`${agent.host}:${agent.port}`);\r\n        // 更新 agent 的在线状态\r\n        agent.status = result.data == \"success\" ? \"success\" : \"danger\";\r\n    });\r\n\r\n    // 等待所有的 ping 操作完成\r\n    await Promise.all(pingPromises);\r\n\r\n    const agent = await selectFirstConnectedAgent();\r\n\r\n    await takeScreenshot();\r\n\r\n    await getCurrentPid(agent);\r\n\r\n    // 所有操作完成后停止加载\r\n    pingButtonLoading.value = false;\r\n}\r\n\r\nconst takeScreenshot = async () => {\r\n    refreshButtonDisabled.value = true;\r\n    clearGetScreenshotInterval();\r\n\r\n    screenshotUrl.value = `http://${currentHost.value}:${currentPort.value}/bridge/screenshot?timestamp=${new Date().getTime()}`;\r\n    setTimeout(async () => {\r\n        screenshotLoading.value = false;\r\n        getScreenshotIntervalId = setInterval(async () => {\r\n            screenshotUrl.value = `http://${currentHost.value}:${currentPort.value}/bridge/screenshot?timestamp=${new Date().getTime()}`;\r\n        }, syncInterval);\r\n        refreshButtonDisabled.value = false;\r\n    }, 500);\r\n}\r\n\r\nconst popUpScreenshot = () => {\r\n    bigScreenshotUrl.value = screenshotUrl.value;\r\n    dialogFormVisible.value = true;\r\n}\r\n\r\nconst zoomInScreenshot = () => {\r\n    if (screenshotColumnWidth.value == 18) {\r\n        return;\r\n    }\r\n    logAreaColumnWidth.value -= 1;\r\n    screenshotColumnWidth.value += 1;\r\n}\r\n\r\nconst resizeScreenshot = () => {\r\n    logAreaColumnWidth.value = 14;\r\n    screenshotColumnWidth.value = 10;\r\n}\r\n\r\nconst showScreenshotArea = () => {\r\n    logAreaColumnWidth.value = 14;\r\n    screenshotColumnWidth.value = 10;\r\n\r\n    screenshotVisible.value = true;\r\n}\r\n\r\nconst hideScreenshotArea = () => {\r\n    logAreaColumnWidth.value = 24;\r\n    screenshotColumnWidth.value = 0;\r\n\r\n    screenshotVisible.value = false;\r\n}\r\n\r\nconst selectFirstConnectedAgent = async () => {\r\n    const agent = agents.value.find(item => item.status == \"success\");\r\n    if (!agent) {\r\n        return;\r\n    }\r\n    command.value = agent.defaultCommand;\r\n    directory.value = agent.defaultDirectory;\r\n\r\n    activeIndex.value = agent.index;\r\n    currentAgentConnected.value = true;\r\n    currentHost.value = agent.host;\r\n    currentPort.value = agent.port;\r\n    return agent;\r\n}\r\n\r\nconst getCurrentPid = async (agent: any = null) => {\r\n    const host = agent == null ? currentHost.value : agent.host;\r\n    const port = agent == null ? currentPort.value : agent.port;\r\n    const response = await getPids(`${host}:${port}`);\r\n    const result = response.data ? response.data : [];\r\n    pids.value = result.pids.map((item: any) => ({\r\n        value: item,\r\n        label: item\r\n    }));\r\n    currentPid.value = pids.value.length > 0 ? pids.value[0].value : \"\";\r\n}\r\n\r\nconst useAgent = async (agent: any) => {\r\n    currentAgentConnected.value = false;\r\n    emptyDescription.value = \"Please wait...\";\r\n    currentHost.value = agent.host;\r\n    currentPort.value = agent.port;\r\n    command.value = \"\";\r\n    directory.value = \"\";\r\n    logContent.value = \"\";\r\n    const result = await ping(`${agent.host}:${agent.port}`);\r\n    if (\"success\" != result.data) {\r\n        emptyDescription.value = \"The server is disconnected!\";\r\n        return\r\n    }\r\n    command.value = agent.defaultCommand;\r\n    directory.value = agent.defaultDirectory;\r\n    currentAgentConnected.value = true;\r\n    await getCurrentPid(agent);\r\n}\r\n\r\nconst openDeviceViewer = (status: string, name: string, host: string, port: string) => {\r\n    if (\"success\" == status) {\r\n        window.open(`/viewer?name=${name}&server=${host}:${port}`, '_blank');\r\n    }\r\n}\r\n\r\nconst copyCommand = () => {\r\n    navigator.clipboard.writeText(command.value)\r\n        .then(() => {\r\n            ElMessage({\r\n                message: 'Command is copied to clipboard.',\r\n                type: 'success',\r\n            });\r\n        })\r\n        .catch(() => {\r\n            ElMessage.error('Oops, failed to copy command to clipboard.');\r\n        });\r\n}\r\n\r\nconst conductCommand = async () => {\r\n    const commandText = `cd ${directory.value} && ${command.value}`;\r\n    const response = await runCommand(`${currentHost.value}:${currentPort.value}`, commandText);\r\n    if (\"success\" == response.data.status) {\r\n        await getCurrentPid();\r\n        ElMessage({\r\n            message: 'Command is conducted.',\r\n            type: 'success',\r\n        });\r\n        await loadLog();\r\n        return;\r\n    }\r\n    ElMessage.error('Oops, failed to conduct command.');\r\n}\r\n\r\nconst copyDirectory = () => {\r\n    navigator.clipboard.writeText(directory.value)\r\n        .then(() => {\r\n            ElMessage({\r\n                message: 'Directory is copied to clipboard.',\r\n                type: 'success',\r\n            });\r\n        })\r\n        .catch(() => {\r\n            ElMessage.error('Oops, failed to copy directory to clipboard.');\r\n        });\r\n}\r\n\r\nconst clearGetLogInterval = () => {\r\n    if (undefined != getLogIntervalId) {\r\n        clearInterval(getLogIntervalId);\r\n    }\r\n}\r\n\r\nconst clearGetScreenshotInterval = () => {\r\n    if (undefined != getScreenshotIntervalId) {\r\n        clearInterval(getScreenshotIntervalId);\r\n    }\r\n}\r\n\r\nconst loadLog = async () => {\r\n    clearGetLogInterval();\r\n\r\n    logContent.value = \"\";\r\n    logLength.value = 0;\r\n    await getLogByPid();\r\n    logLength.value += 1;\r\n    let emptyLogQuantity = 0;\r\n    getLogIntervalId = setInterval(async () => {\r\n        const response = await getContentByQuery(`${currentHost.value}:${currentPort.value}`, currentPid.value, logLength.value, logQueryLength);\r\n        if (response.data.content.length != 0) {\r\n            emptyLogQuantity = 0;\r\n            logLength.value += response.data.content.length;\r\n            colorLog(response.data.content);\r\n            return;\r\n        }\r\n        emptyLogQuantity += 1;\r\n        if (emptyLogQuantity == maxEmptyLogQuantity) {\r\n            clearInterval(getLogIntervalId);\r\n        }\r\n    }, syncInterval);\r\n}\r\n\r\nconst getLogByPid = async () => {\r\n    loadLogButtonLoading.value = true;\r\n    logContent.value = \"\";\r\n    logLength.value = 0;\r\n    const response = await getContentByPid(`${currentHost.value}:${currentPort.value}`, currentPid.value);\r\n    logLength.value = response.data.content.length;\r\n\r\n    logContent.value += `<span style=\"background-color: yellow\">${response.data.command}</span><br/>`;\r\n    colorLog(response.data.content);\r\n    loadLogButtonLoading.value = false;\r\n}\r\n\r\nconst colorLog = (content: any[]) => {\r\n    content.forEach((item: any) => {\r\n        const lowerCaseMessage = item.toLowerCase();\r\n        if (lowerCaseMessage.indexOf(\"error\") > -1 || lowerCaseMessage.indexOf(\"fail\") > -1) {\r\n            logContent.value += `<span style=\"background-color: red;color='white'\">${lowerCaseMessage}</span><br/>`;\r\n            return;\r\n        }\r\n        if (lowerCaseMessage.indexOf(\"passed\") > -1 || lowerCaseMessage.indexOf(\"success\") > -1) {\r\n            logContent.value += `<span style=\"background-color: lightgreen\">${lowerCaseMessage}</span><br/>`;\r\n            return;\r\n        }\r\n        logContent.value += `<span>${lowerCaseMessage}</span><br/>`;\r\n    });\r\n}\r\n\r\nconst stopCurrentPid = async () => {\r\n    clearGetLogInterval();\r\n\r\n    const response = await stopPid(`${currentHost.value}:${currentPort.value}`, currentPid.value);\r\n    if (\"success\" == response.data.status) {\r\n        await getCurrentPid();\r\n        ElMessage({\r\n            message: 'Current process is stopped.',\r\n            type: 'success',\r\n        });\r\n        return;\r\n    }\r\n    ElMessage.error('Oops, failed to stop current process.');\r\n}\r\n\r\nconst deleteCurrentPid = async () => {\r\n    clearGetLogInterval();\r\n\r\n    const response = await deletePid(`${currentHost.value}:${currentPort.value}`, currentPid.value);\r\n    if (\"success\" == response.data.status) {\r\n        await getCurrentPid();\r\n        ElMessage({\r\n            message: 'Current process is terminated.',\r\n            type: 'success',\r\n        });\r\n        logContent.value = \"\";\r\n        return;\r\n    }\r\n    ElMessage.error('Oops, failed to terminate current process.');\r\n}\r\n\r\nconst deletePids = async () => {\r\n    clearGetLogInterval();\r\n\r\n    const response = await deleteAllPids(`${currentHost.value}:${currentPort.value}`);\r\n    if (\"success\" == response.data.status) {\r\n        await getCurrentPid();\r\n        ElMessage({\r\n            message: 'All processes are terminated.',\r\n            type: 'success',\r\n        });\r\n        logContent.value = \"\";\r\n        return;\r\n    }\r\n    ElMessage.error('Oops, failed to terminate all processes.');\r\n}\r\n</script>\r\n\r\n<style>\r\n.el-main {\r\n    padding: 5px;\r\n    /* 调整内边距 */\r\n}\r\n\r\n.status-wrapper {\r\n    display: flex;\r\n    align-items: center;\r\n    /* 确保子元素在垂直方向上居中对齐 */\r\n}\r\n\r\n.status-dot {\r\n    margin-right: 3px;\r\n    /* 调整圆点与文本之间的间距 */\r\n    margin-top: 0;\r\n    /* 确保没有额外的上边距 */\r\n    display: inline-flex;\r\n    /* 确保它是一个内联块元素 */\r\n    align-items: center;\r\n    /* 垂直居中 */\r\n}\r\n\r\n.screenshot {\r\n    width: 99%;\r\n    height: auto;\r\n    border: 2px solid black;\r\n    border-radius: 5px;\r\n}\r\n\r\n.editable-area {\r\n    border: 1px solid black;\r\n    padding: 10px;\r\n    min-height: 550px;\r\n    max-height: 550px;\r\n    overflow-y: auto;\r\n    text-align: left;\r\n}\r\n</style>","import script from \"./HomePage.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./HomePage.vue?vue&type=script&lang=ts&setup=true\"\n\nimport \"./HomePage.vue?vue&type=style&index=0&id=5cc4da0c&lang=css\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["ping","server","request","url","method","params","getPids","getContentByPid","pid","getContentByQuery","startLine","lineLength","stopPid","data","deletePid","deleteAllPids","runCommand","commandText","command","getAgentInfo","index","name","defaultDirectory","host","port","defaultCommand","status","_hoisted_1","class","_hoisted_2","key","_hoisted_3","_hoisted_4","_hoisted_5","style","_hoisted_6","_hoisted_7","_hoisted_8","logQueryLength","maxEmptyLogQuantity","syncInterval","_defineComponent","__name","setup","__props","agents","ref","pids","pingButtonLoading","activeIndex","currentHost","currentPort","currentAgentConnected","emptyDescription","windowHeight","window","innerHeight","directory","logContent","currentPid","loadLogButtonLoading","logLength","getLogIntervalId","screenshotUrl","bigScreenshotUrl","screenshotLoading","getScreenshotIntervalId","refreshButtonDisabled","dialogFormVisible","logAreaColumnWidth","screenshotColumnWidth","screenshotVisible","onBeforeMount","async","pingAgents","onMounted","value","pingPromises","map","agent","result","Promise","all","selectFirstConnectedAgent","takeScreenshot","getCurrentPid","clearGetScreenshotInterval","Date","getTime","setTimeout","setInterval","popUpScreenshot","zoomInScreenshot","resizeScreenshot","showScreenshotArea","hideScreenshotArea","find","item","response","label","length","useAgent","openDeviceViewer","open","copyCommand","navigator","clipboard","writeText","then","ElMessage","message","type","catch","error","conductCommand","loadLog","copyDirectory","clearGetLogInterval","undefined","clearInterval","getLogByPid","emptyLogQuantity","content","colorLog","forEach","lowerCaseMessage","toLowerCase","indexOf","stopCurrentPid","deleteCurrentPid","deletePids","_ctx","_cache","_component_el_badge","_resolveComponent","_component_Cellphone","_component_el_icon","_component_el_menu_item","_component_el_menu","_component_el_button","_component_el_aside","_component_el_empty","_component_FolderOpened","_component_CopyDocument","_component_el_tooltip","_component_el_input","_component_Operation","_component_Pointer","_component_el_option","_component_el_select","_component_el_button_group","_component_View","_component_el_col","_component_FullScreen","_component_ZoomIn","_component_Aim","_component_Refresh","_component_Hide","_component_el_row","_component_el_main","_component_el_container","_component_el_image","_component_el_dialog","_directive_loading","_resolveDirective","_openBlock","_createElementBlock","_createVNode","default","_withCtx","_normalizeStyle","width","height","_unref","_createElementVNode","_Fragment","_renderList","_createBlock","onClick","$event","_createTextVNode","_toDisplayString","_","loading","_createCommentVNode","description","gutter","span","modelValue","clearable","prepend","append","effect","placement","contenteditable","innerHTML","placeholder","size","disabled","_withDirectives","id","draggable","src","modal","title","fit","__exports__"],"sourceRoot":""}